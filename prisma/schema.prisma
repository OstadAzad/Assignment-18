// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user{
  id            BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  firstName     String      @db.VarChar(50)
  middleName    String      @db.VarChar(50)
  lastName      String      @db.VarChar(50)
  mobile        String?      @db.VarChar(15)
  email         String      @db.VarChar(50)
  passwordHash  String      @db.VarChar(32)
  registeredAt  DateTime?    @default(now()) 
  lastLogin     DateTime?    @default(now())
  intro         String?      @db.TinyText
  profile       String?      @db.Text
  post          post[]
}

model post{
  id            BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  authorId      BigInt      @db.UnsignedBigInt
  parentId      BigInt      @db.UnsignedBigInt
  title         String      @db.VarChar(75)
  metaTitle     String      @db.VarChar(75)
  slug          String      @db.VarChar(75)
  summary       String      @db.TinyText
  published     Boolean     @db.TinyInt
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())
  publishedAt   DateTime    @default(now())
  content       String      @db.Text
  user_id       BigInt      @db.UnsignedBigInt
  user          user        @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  post_comment  post_comment[]
  post_meta     post_meta[]
  post_category post_category[]
  post_tag      post_tag[]
}

model post_comment{
  id            BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  post_id       BigInt      @db.UnsignedBigInt
  parentId      BigInt      @db.UnsignedBigInt
  title         String      @db.VarChar(100)
  published     Boolean     @db.TinyInt
  createdAt     DateTime    @default(now())
  publishedAt   DateTime    @default(now())
  content       String      @db.Text
  post          post        @relation(fields: [post_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model post_meta{
  id            BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  post_id       BigInt      @db.UnsignedBigInt
  key           String      @db.VarChar(50)
  content       String      @db.Text
  post          post        @relation(fields: [post_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model   category{
  id            BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  parentId      BigInt      @db.UnsignedBigInt
  title         String      @db.VarChar(75)
  metaTitle     String      @db.VarChar(100)
  slug          String      @db.VarChar(100)
  content       String      @db.Text
  post_category post_category[]
}

model   tag{
  id            BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  title         String      @db.VarChar(75)
  metaTitle     String      @db.VarChar(100)
  slug          String      @db.VarChar(100)
  content       String      @db.Text
  post_tag post_tag[]
}

model post_category{
  id            BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  post_id       BigInt      @db.UnsignedBigInt
  category_id   BigInt      @db.UnsignedBigInt
  post          post        @relation(fields: [post_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  category      category    @relation(fields: [category_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model post_tag{
  id            BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  post_id       BigInt      @db.UnsignedBigInt
  tag_id        BigInt      @db.UnsignedBigInt
  post          post        @relation(fields: [post_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  tag           tag         @relation(fields: [tag_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}